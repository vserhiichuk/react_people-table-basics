{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","components/ErrorComponent/ErrorComponent.tsx","components/EmptyComponent/EmptyComponent.tsx","components/PersonLink/PersonLink.tsx","components/PeopleComponent/PeopleComponent.tsx","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","ErrorComponent","errorMessage","EmptyComponent","PersonLink","person","slug","sex","name","to","cn","PeopleComponent","people","slugId","useParams","map","born","died","motherName","fatherName","findPersonMother","find","item","findPersonFather","isNoMotherNameOnPeople","isNoMotherOnServer","isNoFatherNameOnPeople","isNoFatherOnServer","PeoplePage","isLoading","isDisplayErrorMessage","isNoPeopleOnServer","length","isPeopleOnServer","getLinkClass","isActive","App","useState","setPeople","setIsLoading","setErrorMessage","useEffect","catch","finally","role","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.b8c8420a.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\ninterface Props {\n  errorMessage: string\n}\n\nexport const ErrorComponent: React.FC<Props> = ({ errorMessage }) => (\n  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n    {errorMessage}\n  </p>\n);\n","import React from 'react';\n\nexport const EmptyComponent: React.FC = () => (\n  <p data-cy=\"noPeopleMessage\">\n    There are no people on the server\n  </p>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ninterface Props {\n  person: Person\n}\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n\n  return (\n    <Link\n      to={`../${slug}`}\n      className={cn({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { PersonLink } from '../PersonLink/PersonLink';\nimport { Person } from '../../types';\n\ninterface Props {\n  people: Person[]\n}\n\nexport const PeopleComponent: React.FC<Props> = ({ people }) => {\n  const { slugId } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => {\n          const {\n            slug,\n            sex,\n            born,\n            died,\n            motherName,\n            fatherName,\n          } = person;\n\n          const findPersonMother = people\n            .find(item => item.name === motherName);\n\n          const findPersonFather = people\n            .find(item => item.name === fatherName);\n\n          const isNoMotherNameOnPeople = !findPersonMother && motherName;\n          const isNoMotherOnServer = !findPersonMother && !motherName;\n\n          const isNoFatherNameOnPeople = !findPersonFather && fatherName;\n          const isNoFatherOnServer = !findPersonFather && !fatherName;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={cn({\n                'has-background-warning': slug === slugId,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {findPersonMother && <PersonLink person={findPersonMother} />}\n                {isNoMotherNameOnPeople && `${motherName}`}\n                {isNoMotherOnServer && !motherName && '-'}\n              </td>\n              <td>\n                {findPersonFather && <PersonLink person={findPersonFather} />}\n                {isNoFatherNameOnPeople && `${fatherName}`}\n                {isNoFatherOnServer && '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { ErrorComponent } from '../ErrorComponent/ErrorComponent';\nimport { EmptyComponent } from '../EmptyComponent/EmptyComponent';\nimport { PeopleComponent } from '../PeopleComponent/PeopleComponent';\n\ninterface Props {\n  people: Person[],\n  isLoading: boolean\n  errorMessage: string\n}\n\nexport const PeoplePage: React.FC<Props> = ({\n  people,\n  isLoading,\n  errorMessage,\n}) => {\n  const isDisplayErrorMessage = errorMessage && !isLoading;\n  const isNoPeopleOnServer = !people.length && !isLoading && !errorMessage;\n  const isPeopleOnServer = !!people.length && !errorMessage;\n\n  return (\n    <div className=\"block\">\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {isDisplayErrorMessage && (\n          <ErrorComponent errorMessage={errorMessage} />\n        )}\n\n        {isNoPeopleOnServer && <EmptyComponent /> }\n\n        {isPeopleOnServer && <PeopleComponent people={people} />}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport {\n  NavLink,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport './App.scss';\nimport cn from 'classnames';\nimport { Person } from './types';\nimport { getPeople } from './api';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  cn('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const App = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setErrorMessage('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              to=\"/\"\n              className={getLinkClass}\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              to=\"/people\"\n              className={getLinkClass}\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <Routes>\n          <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"people\">\n            <Route\n              path=\":slugId?\"\n              element={(\n                <PeoplePage\n                  people={people}\n                  isLoading={isLoading}\n                  errorMessage={errorMessage}\n                />\n              )}\n            />\n          </Route>\n\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Routes>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}